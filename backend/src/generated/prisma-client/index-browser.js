
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  phone: 'phone',
  password: 'password',
  googleId: 'googleId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  accountNumber: 'accountNumber',
  verified: 'verified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillScalarFieldEnum = {
  id: 'id',
  billName: 'billName',
  description: 'description',
  type: 'type',
  note: 'note',
  amount: 'amount',
  priority: 'priority',
  status: 'status',
  category: 'category',
  dueDate: 'dueDate',
  paymentMethod: 'paymentMethod',
  userId: 'userId',
  providerId: 'providerId',
  requestId: 'requestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  status: 'status',
  billId: 'billId',
  reference: 'reference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  balance: 'balance',
  userId: 'userId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.RequestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  notes: 'notes',
  status: 'status',
  feedback: 'feedback',
  publicLinkId: 'publicLinkId',
  requesterId: 'requesterId',
  supporterId: 'supporterId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  email: 'email',
  amount: 'amount',
  reference: 'reference',
  status: 'status',
  splitCode: 'splitCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AirtimeTransactionScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  amount: 'amount',
  network: 'network',
  reference: 'reference',
  createdAt: 'createdAt'
};

exports.Prisma.SubaccountScalarFieldEnum = {
  id: 'id',
  businessName: 'businessName',
  bankCode: 'bankCode',
  accountNumber: 'accountNumber',
  percentageCharge: 'percentageCharge',
  subaccountCode: 'subaccountCode',
  createdAt: 'createdAt',
  lastPaidAt: 'lastPaidAt'
};

exports.Prisma.SubaccountSplitScalarFieldEnum = {
  id: 'id',
  subaccountId: 'subaccountId',
  splitGroupId: 'splitGroupId',
  share: 'share'
};

exports.Prisma.SplitGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  currency: 'currency',
  splitCode: 'splitCode',
  bearerType: 'bearerType',
  bearerSubaccount: 'bearerSubaccount',
  createdAt: 'createdAt'
};

exports.Prisma.TransferScalarFieldEnum = {
  id: 'id',
  name: 'name',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  bankCode: 'bankCode',
  recipientCode: 'recipientCode',
  amount: 'amount',
  reason: 'reason',
  reference: 'reference',
  status: 'status',
  batchId: 'batchId',
  createdAt: 'createdAt'
};

exports.Prisma.BatchScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  status: 'status'
};

exports.Prisma.BulkTransferScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  status: 'status',
  reference: 'reference',
  reason: 'reason',
  recipientCode: 'recipientCode',
  transferCode: 'transferCode',
  createdAt: 'createdAt',
  batchId: 'batchId'
};

exports.Prisma.RecipientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  accountNumber: 'accountNumber',
  bankCode: 'bankCode',
  recipientCode: 'recipientCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CryptoWalletScalarFieldEnum = {
  id: 'id',
  address: 'address',
  userId: 'userId',
  u2kBalance: 'u2kBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlockchainRequestScalarFieldEnum = {
  id: 'id',
  billId: 'billId',
  blockchainBillId: 'blockchainBillId',
  transactionHash: 'transactionHash',
  status: 'status',
  amount: 'amount',
  cryptoAmount: 'cryptoAmount',
  paymentType: 'paymentType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlockchainTransactionScalarFieldEnum = {
  id: 'id',
  transactionHash: 'transactionHash',
  from: 'from',
  to: 'to',
  amount: 'amount',
  status: 'status',
  cryptoWalletId: 'cryptoWalletId',
  blockchainRequestId: 'blockchainRequestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SplitPaymentScalarFieldEnum = {
  id: 'id',
  email: 'email',
  amount: 'amount',
  splitCode: 'splitCode',
  reference: 'reference',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  BENEFACTOR: 'BENEFACTOR',
  BENEFACTEE: 'BENEFACTEE'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.BillStatus = exports.$Enums.BillStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PAID: 'PAID',
  FAILED: 'FAILED'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.BlockchainTxStatus = exports.$Enums.BlockchainTxStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED',
  REJECTED: 'REJECTED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  NATIVE: 'NATIVE',
  U2K_TOKEN: 'U2K_TOKEN'
};

exports.Prisma.ModelName = {
  User: 'User',
  Provider: 'Provider',
  Bill: 'Bill',
  Transaction: 'Transaction',
  Wallet: 'Wallet',
  Request: 'Request',
  Payment: 'Payment',
  AirtimeTransaction: 'AirtimeTransaction',
  Subaccount: 'Subaccount',
  SubaccountSplit: 'SubaccountSplit',
  SplitGroup: 'SplitGroup',
  Transfer: 'Transfer',
  Batch: 'Batch',
  BulkTransfer: 'BulkTransfer',
  Recipient: 'Recipient',
  CryptoWallet: 'CryptoWallet',
  BlockchainRequest: 'BlockchainRequest',
  BlockchainTransaction: 'BlockchainTransaction',
  SplitPayment: 'SplitPayment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
